/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

package me.ionut.rezolvari

object Problema12 {

	def rezolvare() = {
		triangulars().find(divisisorNumbers(_) > 500)
	}

	def triangulars(a: Int=1, n: Int=2): Stream[Int] = a #:: triangulars(a+n, n+1)

	def divisisorNumbers(n: Int) = {

		val middleFactor = math.sqrt(n).intValue
  		val smallFactors = (1 to middleFactor).count(n % _ == 0)
  		2 * smallFactors - (if (middleFactor * middleFactor == n) 1 else 0)
	}


	/*
	def divisisorNumbers(n: Int, sum: Int, primes: Stream[Int]): Int = primes match {
		case head #:: tail if head > n => sum
		case prime #:: tail =>
		var number = n
		var count = 0
		while (number % prime == 0) {
			number = number / prime
			count = count + 1
		}
		if (prime == 2 && count > 0) {
			count = count - 1
		}
		divisisorNumbers(number, sum * (count + 1), tail)
	}

	def euler12(n: Int) = {
		val primeStreamInt  = Stream.from(1).filter(BigInt(_).isProbablePrime(15))
		Stream.from(1)
			.find(i => divisisorNumbers(i,1, primeStreamInt) * divisisorNumbers(i + 1, 1,primeStreamInt) > n)
			.map(i => i * (i + 1) / 2)
	}
	*/	
}

